#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import requests
import re
import pandas as pd
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor, as_completed
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import BOT_TOKEN, MAX_PAGES, MAX_VACANCIES, CITIES, DEFAULT_CITY, USER_AGENT

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
user_states = {}


def get_city_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞"""
    keyboard = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    for city_code, city_name in CITIES.items():
        keyboard.add(InlineKeyboardButton(
            text=city_name,
            callback_data=f"city_{city_code}"
        ))

    keyboard.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return keyboard.as_markup()


def get_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    main_menu = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")]
        ]
    )
    return main_menu


def create_progress_bar(percentage, width=20):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = int(width * percentage / 100)
    empty = width - filled
    bar = "‚ñà" * filled + "‚ñë" * empty
    return f"[{bar}] {percentage}%"


async def update_progress(message, current, total, status_msg=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    percentage = min(100, int((current / total) * 100))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 5% –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
    if status_msg and current % max(1, total // 20) == 0 or current == total:
        try:
            progress_bar = create_progress_bar(percentage)
            await status_msg.edit_text(
                f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π...\n{progress_bar}\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current}/{total}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    return percentage


def get_vacancy_urls(query, pages, area):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–∞–π—Ç–∞ HH.ru"""
    urls = []
    headers = {"User-Agent": USER_AGENT}

    for n in range(pages):
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è —Å–∫–æ–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ text
        url = f"https://hh.ru/search/vacancy?text={query}&area={area}&page={n}"
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if "–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´" in response.text and "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in response.text:
                return urls, "not_found"

            vacancy_links = soup.find_all('a', {'data-qa': 'serp-item__title'})

            for link in vacancy_links:
                full_url = link['href']
                # –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
                clean_url = full_url.split('?')[0]
                if "hh.ru/vacancy/" in clean_url:
                    urls.append(clean_url)

        except Exception as e:
            return urls, f"error: {str(e)}"

    return urls, "success"


def process_vacancy(url):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –≤–∞–∫–∞–Ω—Å–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    try:
        headers = {"User-Agent": USER_AGENT}
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        html_content = response.text

        soup = BeautifulSoup(html_content, 'html.parser')

        # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        h1 = soup.find('h1', class_='bloko-header-section-1')
        title = h1.get_text(strip=True) if h1 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        # –ö–æ–º–ø–∞–Ω–∏—è
        company_match = re.search(r'"hiringOrganization".*?"name"\s*:\s*"([^"]+)"', html_content)
        company = company_match.group(1) if company_match else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        # –ê–¥—Ä–µ—Å
        address_match = re.search(r'"displayName"\s*:\s*"([^"]+)"', html_content)
        address = address_match.group(1) if address_match else "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –ó–∞—Ä–ø–ª–∞—Ç–∞
        salary_match = re.search(r'"compensation"\s*:\s*\{[^}]*"to"\s*:\s*(\d+)', html_content)
        if not salary_match:
            salary_match = re.search(r'"salary"\s*:\s*\{[^}]*"to"\s*:\s*(\d+)', html_content)

        if salary_match:
            salary_to = f"–¥–æ {int(salary_match.group(1)):,} ‚ÇΩ"
            # –¢–∏–ø –≤—ã–ø–ª–∞—Ç—ã
            gross_match = re.search(r'"gross"\s*:\s*(true|false)', html_content)
            tax = "–¥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤" if gross_match and gross_match.group(1) == "true" else "–Ω–∞ —Ä—É–∫–∏"

            return {
                "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏": title,
                "–ö–æ–º–ø–∞–Ω–∏—è": company,
                "–ê–¥—Ä–µ—Å": address,
                "–ó–∞—Ä–ø–ª–∞—Ç–∞": salary_to,
                "–í—ã–¥–∞—á–∞": tax,
                "–°—Å—ã–ª–∫–∞": url
            }
        return None

    except Exception:
        return None


async def parse_vacancies(query, pages, area, message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∞ {pages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ URL
    urls, status = await asyncio.get_event_loop().run_in_executor(
        None, lambda: get_vacancy_urls(query, pages, area)
    )

    if status == "not_found":
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return None
    elif status.startswith("error"):
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {status[6:]}")
        return None

    if not urls:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return None

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    urls = urls[:MAX_VACANCIES]

    status_msg = await message.answer("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")

    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    data = []
    processed_count = 0
    skipped_count = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    await update_progress(message, 0, len(urls), status_msg)

    with ThreadPoolExecutor(max_workers=min(10, len(urls))) as executor:
        future_to_url = {executor.submit(process_vacancy, url): url for url in urls}

        for i, future in enumerate(as_completed(future_to_url), 1):
            result = future.result()
            if result:
                data.append(result)
                processed_count += 1
            else:
                skipped_count += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await update_progress(message, i, len(urls), status_msg)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await status_msg.edit_text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    if not data:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π.")
        return None

    await message.answer(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(urls)} | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    return data


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö.\n\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞: {MAX_PAGES}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {MAX_VACANCIES}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /search <–∑–∞–ø—Ä–æ—Å> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–∞–Ω–∏—Ü]",
        reply_markup=get_main_menu()
    )


@dp.message(lambda message: message.text == "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")
async def new_search(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.\n"
        "–ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç python\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–º–∞–∫—Å–∏–º—É–º 5):\n"
        "–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç python 3"
    )
    user_states[message.chat.id] = {"state": "waiting_query"}


@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    args = message.text.split()[1:]
    if not args:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search\n–ü—Ä–∏–º–µ—Ä: /search –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç python 2")
        return

    query = args[0]
    pages = 1

    if len(args) > 1:
        try:
            pages = min(int(args[1]), MAX_PAGES)
        except ValueError:
            query = " ".join(args)

    user_states[message.chat.id] = {
        "state": "processing",
        "query": query,
        "pages": pages,
        "city": DEFAULT_CITY
    }

    # –°—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥
    await message.answer(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_city_keyboard()
    )


@dp.callback_query(lambda c: c.data.startswith('city_'))
async def process_city(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    city_code = callback_query.data.split('_')[1]
    chat_id = callback_query.message.chat.id

    if chat_id in user_states and "query" in user_states[chat_id]:
        user_states[chat_id]["city"] = city_code
        query = user_states[chat_id]["query"]
        pages = user_states[chat_id]["pages"]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞
        await callback_query.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        await callback_query.message.answer(
            f"üåÜ –ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω: {CITIES.get(city_code, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')}\n"
            f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∞ {pages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö..."
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        await process_search(callback_query.message, query, pages, city_code)
    else:
        await callback_query.answer("–°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", show_alert=True)


async def process_search(message, query, pages, area):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        data = await parse_vacancies(query, pages, area, message)
        if not data:
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        csv_file = f"vacancies_{message.chat.id}.csv"
        df.to_csv(csv_file, index=False, encoding='utf-8-sig')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        excel_file = f"vacancies_{message.chat.id}.xlsx"
        df.to_excel(excel_file, index=False)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        await message.answer("üìÅ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV
        await message.answer_document(FSInputFile(csv_file), caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel
        await message.answer_document(FSInputFile(excel_file), caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(csv_file)
        os.remove(excel_file)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_main_menu())

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if message.chat.id in user_states:
            del user_states[message.chat.id]


@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id

    if chat_id in user_states and user_states[chat_id]["state"] == "waiting_query":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        parts = message.text.split()
        query = parts[0]
        pages = 1

        if len(parts) > 1:
            try:
                pages = min(int(parts[-1]), MAX_PAGES)
                query = " ".join(parts[:-1])
            except ValueError:
                query = message.text

        user_states[chat_id] = {
            "state": "waiting_city",
            "query": query,
            "pages": pages
        }

        await message.answer(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_city_keyboard()
        )
    else:
        await message.answer(
            "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH.ru.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π –ø–æ–∏—Å–∫' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search",
            reply_markup=get_main_menu()
        )


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())